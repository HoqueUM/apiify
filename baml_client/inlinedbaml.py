###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "article.baml": "class Article {\n    title string\n    date string\n    author string\n    summary string\n    content string\n}\n\nfunction ExtractArticle(article: string) -> Article {\n    client Mistral\n    prompt #\"\n        Extract from this content:\n        {{ article }}\n\n        {{ ctx.output_format }}\n    \"#\n}",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Mistral {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.mistral.ai/v1\"\n    safe_prompt true\n    model \"ft:open-mistral-7b:b4c3b5c2:20250202:57e1b64f\"\n    api_key env.MISTRAL_API_KEY\n  }\n}\n\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> Llama {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:11434/v1\"\n  }\n}\n\nclient<llm> Wizard {\n  provider \"ollama\"\n  options {\n    model \"wizardlm2\"\n    api_key \"ollama\"\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
    "type_test.baml": "class PageData {\n    @@dynamic\n}\n\nclass Metadata {\n    part string @description(#\"\n        The content part that was extracted.\n        \"#)\n    tag string @description(#\"\n        The HTML tag that contains the content.\n        \"#)\n    content string @description(#\"\n        The content of the HTML tag. This should not be HTML.\n        This should be the content that is visible to the user.\n        It should align with the part.\n        \"#)\n    attributes Atrribute[]\n}\n\nclass Atrribute {\n    attribute string @description(#\"\n        The attributes of the HTML tag.\n        This could be class, id, href, etc.\n    \"#)\n    value string @description(#\"\n        The value of the attribute.\n    \"#)\n}\n\nfunction ExtractPageData(parts: string[], HTML: string) -> PageData {\n    client Mistral\n    prompt #\"\n       Task: Extract exact HTML snippets containing specific content.\n\n        For each of the following content parts:\n        {% for part in parts %}\n        - {{part}}\n        {% endfor %}\n\n        Instructions:\n        1. Extract the full HTML of that element, including its tags and all attributes.\n        2. Preserve the exact formatting, spacing, and attribute order as in the original HTML.\n        3. Choose the innermost element that fully encapsulates the required content.        \n        4. Prioritize elements with identifying attributes (e.g., class, id) that are directly related to the content.\n        5. If a part is not found, attempt to interpret what the most likely content would be. Otherwise, leave it blank.\n        6. If multiple elements match, choose the most logical option.\n        7. Pretend that you are extracting this data for a database using some \n              kind of web scraping tool. It is necessary to to keep it clean\n              and accurate. Do not overly generalize the content.\n\n        HTML Source:\n        {{ HTML }}\n\n        {{ ctx.output_format }}\n\n    \"#\n}\n\nfunction FilterPageData(parts: string[], HTML: string) -> Metadata[] {\n    client Mistral\n    prompt #\"\n       Task: Extract data from this HTML.\n\n        For each of the following content parts:\n        {% for part in parts %}\n        - {{part}}\n        {% endfor %}\n\n        Instructions:\n        1. Extract as many values as you can.\n        2. Be as specific as possible. Do not leave the content portion as HTML.\n        3. If a part is not found, leave it blank.\n        4. Pretend that you are extracting this data for a database using some \n              kind of web scraping tool. It is necessary to to keep it clean\n              and accurate. Do not overly generalize the content.\n\n        HTML Source:\n        {{ HTML }}\n    \n        {{ ctx.output_format }}\n\n    \"#\n}",
}

def get_baml_files():
    return file_map